name: Build Desktop App

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build web app
      run: npm run build
      
    - name: Install sharp for icon generation
      run: npm install sharp --save-dev
      
    - name: Create build directory
      shell: bash
      run: |
        node -e "
        const fs = require('fs');
        if (!fs.existsSync('build')) {
          fs.mkdirSync('build', { recursive: true });
        }
        console.log('Build directory created');
        "
      
    - name: Generate icons
      shell: bash
      run: |
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        // Create basic icon files for build process
        const buildDir = 'build';
        if (!fs.existsSync(buildDir)) {
          fs.mkdirSync(buildDir, { recursive: true });
        }
        
        // Create a simple base64 encoded 1x1 PNG as placeholder
        const pngBase64 = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
        const pngBuffer = Buffer.from(pngBase64, 'base64');
        
        // Create placeholder icon files with actual PNG data
        fs.writeFileSync('build/icon-512x512.png', pngBuffer);
        
        // Create minimal ICO file (Windows)
        const icoHeader = Buffer.from([0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00]);
        const icoData = Buffer.concat([icoHeader, pngBuffer]);
        fs.writeFileSync('build/icon.ico', icoData);
        
        // Create minimal ICNS file (macOS) - just copy the PNG for now
        fs.writeFileSync('build/icon.icns', pngBuffer);
        
        console.log('Icon files created successfully');
        "
      
    - name: Install Electron dependencies
      run: npm install --save-dev electron electron-builder
      
    - name: Setup Windows build environment
      if: matrix.os == 'windows-latest'
      run: |
        # Install Windows SDK components if needed
        echo "Setting up Windows build environment"
        
    - name: Create Electron main process
      shell: bash
      run: |
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        if (!fs.existsSync('electron')) {
          fs.mkdirSync('electron', { recursive: true });
        }
        
        const mainJsContent = 'const { app, BrowserWindow, Menu, shell } = require(\\'electron\\');\\n' +
          'const path = require(\\'path\\');\\n' +
          'const isDev = process.env.NODE_ENV === \\'development\\';\\n\\n' +
          'let mainWindow;\\n\\n' +
          'function createWindow() {\\n' +
          '  mainWindow = new BrowserWindow({\\n' +
          '    width: 1200,\\n' +
          '    height: 800,\\n' +
          '    minWidth: 800,\\n' +
          '    minHeight: 600,\\n' +
          '    webPreferences: {\\n' +
          '      nodeIntegration: false,\\n' +
          '      contextIsolation: true,\\n' +
          '      enableRemoteModule: false,\\n' +
          '      webSecurity: true\\n' +
          '    },\\n' +
          '    icon: path.join(__dirname, \\'../public/icon.svg\\'),\\n' +
          '    titleBarStyle: process.platform === \\'darwin\\' ? \\'hiddenInset\\' : \\'default\\',\\n' +
          '    show: false\\n' +
          '  });\\n\\n' +
          '  if (isDev) {\\n' +
          '    mainWindow.loadURL(\\'http://localhost:5173\\');\\n' +
          '    mainWindow.webContents.openDevTools();\\n' +
          '  } else {\\n' +
          '    mainWindow.loadFile(path.join(__dirname, \\'../dist/index.html\\'));\\n' +
          '  }\\n\\n' +
          '  mainWindow.once(\\'ready-to-show\\', () => {\\n' +
          '    mainWindow.show();\\n' +
          '  });\\n\\n' +
          '  mainWindow.webContents.setWindowOpenHandler(({ url }) => {\\n' +
          '    shell.openExternal(url);\\n' +
          '    return { action: \\'deny\\' };\\n' +
          '  });\\n\\n' +
          '  mainWindow.on(\\'closed\\', () => {\\n' +
          '    mainWindow = null;\\n' +
          '  });\\n' +
          '}\\n\\n' +
          'app.whenReady().then(createWindow);\\n\\n' +
          'app.on(\\'window-all-closed\\', () => {\\n' +
          '  if (process.platform !== \\'darwin\\') {\\n' +
          '    app.quit();\\n' +
          '  }\\n' +
          '});\\n\\n' +
          'app.on(\\'activate\\', () => {\\n' +
          '  if (BrowserWindow.getAllWindows().length === 0) {\\n' +
          '    createWindow();\\n' +
          '  }\\n' +
          '});';
        
        fs.writeFileSync('electron/main.js', mainJsContent);
        
        const electronPackageJson = {
          name: 'github-stars-manager-desktop',
          version: '1.0.0',
          description: 'GitHub Stars Manager Desktop App',
          main: 'main.js',
          author: 'GitHub Stars Manager',
          license: 'MIT'
        };
        
        fs.writeFileSync('electron/package.json', JSON.stringify(electronPackageJson, null, 2));
        console.log('Electron files created successfully');
        "
        
    - name: Update main package.json for Electron
      shell: bash
      run: |
        node -e "
        const fs = require('fs');
        const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        
        packageJson.main = 'electron/main.js';
        packageJson.homepage = './';
        packageJson.scripts = packageJson.scripts || {};
        packageJson.scripts.electron = 'electron .';
        packageJson.scripts['electron-dev'] = 'NODE_ENV=development electron .';
        packageJson.scripts.dist = 'electron-builder';
        
        packageJson.build = {
          appId: 'com.github-stars-manager.app',
          productName: 'GitHub Stars Manager',
          directories: {
            output: 'release'
          },
          files: [
            'dist/**/*',
            'electron/**/*',
            'node_modules/**/*',
            'package.json'
          ]
        };
        
        fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
        console.log('Package.json updated successfully');
        "
        
    - name: Configure platform-specific build settings
      shell: bash
      run: |
        node -e "
        const fs = require('fs');
        const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        
        if ('${{ matrix.os }}' === 'windows-latest') {
          packageJson.build.win = {
            target: 'nsis',
            icon: 'build/icon.ico'
          };
          packageJson.build.nsis = {
            oneClick: false,
            allowToChangeInstallationDirectory: true
          };
        } else if ('${{ matrix.os }}' === 'macos-latest') {
          packageJson.build.mac = {
            target: 'dmg',
            icon: 'build/icon.icns',
            category: 'public.app-category.productivity'
          };
        } else {
          packageJson.build.linux = {
            target: 'AppImage',
            icon: 'build/icon-512x512.png',
            category: 'Office'
          };
        }
        
        fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
        console.log('Platform-specific settings configured');
        "
        
    - name: Build Electron app
      run: npm run dist
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CI: true
      continue-on-error: true
        
    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-app
        path: |
          release/*.exe
          release/*.msi
        if-no-files-found: warn
        
    - name: Upload artifacts (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-app
        path: release/*.dmg
        if-no-files-found: warn
        
    - name: Upload artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-app
        path: release/*.AppImage
        if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    continue-on-error: true
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          windows-app/*
          macos-app/*
          linux-app/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}